<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dynamic Profile Card Generator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #e0eafc, #cfdef3);
      padding: 20px;
    }

    h1 {
      text-align: center;
      color: #333;
    }

    .form-container {
      max-width: 500px;
      margin: 20px auto;
      background: #fff;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

    .form-container input,
    .form-container textarea,
    .form-container select,
    .form-container button {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      font-size: 16px;
    }

    .cards-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      justify-content: center;
      margin-top: 30px;
    }

    .profile-card {
      width: 260px;
      background: white;
      padding: 15px;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      text-align: center;
      animation: fadeIn 0.5s ease;
      transition: all 0.3s ease;
    }

    .profile-card.dark {
      background: #222;
      color: #fff;
    }

    .profile-card img {
      width: 120px;
      height: 120px;
      object-fit: cover;
      margin-bottom: 10px;
      border: 3px solid #ccc;
    }

    .square { border-radius: 0; }
    .rounded { border-radius: 10px; }
    .circle { border-radius: 50%; }

    .profile-card button {
      margin: 5px;
      padding: 6px 12px;
      font-size: 14px;
      cursor: pointer;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.95); }
      to { opacity: 1; transform: scale(1); }
    }
  </style>
</head>
<body>
  <h1>Profile Card Generator </h1>

  <div class="form-container">
    <input type="text" id="name" placeholder="Enter your name" />
    <textarea id="bio" placeholder="Enter a short bio"></textarea>
    <input type="file" id="image" accept="image/*" />
    <select id="borderStyle">
      <option value="square">Square</option>
      <option value="rounded">Rectangular</option>
      <option value="circle">Circle</option>
    </select>
    <button onclick="previewCard()"> Preview</button>
    <button onclick="generateCard()">Generate Card</button>
  </div>

  <div class="cards-container" id="cardsContainer"></div>

  <script>
    let previewData = {};

    const previewCard = () => {
      const name = document.getElementById('name').value;
      const bio = document.getElementById('bio').value;
      const image = document.getElementById('image').files[0];
      const borderStyle = document.getElementById('borderStyle').value;

      if (!name) return alert('Please enter your name.');

      if (image) {
        const reader = new FileReader();
        reader.onload = function (e) {
          previewData = { name, bio, image: e.target.result, borderStyle };
          alert('‚úÖ Preview ready! Now click Generate Card.');
        };
        reader.readAsDataURL(image);
      } else {
        previewData = { name, bio, image: '', borderStyle };
        alert('‚úÖ Preview ready! Now click Generate Card.');
      }
    };
    const generateCard = () => {
      if (!previewData.name) return alert('Please preview the card first.');    
        if (!previewData.image) {
            previewData.image = 'https://via.placeholder.com/120'; // Default image if none provided
        }


      const card = {
        id: Date.now(),
        ...previewData,
        theme: 'light'
      };

      const cards = JSON.parse(localStorage.getItem('cards')) || [];
      cards.push(card);
      localStorage.setItem('cards', JSON.stringify(cards));
      renderCards();
    };

    const renderCards = () => {
      const cards = JSON.parse(localStorage.getItem('cards')) || [];
      const container = document.getElementById('cardsContainer');
      container.innerHTML = '';

      cards.forEach(card => {
        const cardEl = document.createElement('div');
        cardEl.className = `profile-card ${card.theme}`;
        cardEl.innerHTML = `
          <img src="${card.image}" class="${card.borderStyle}" />
          <h3>${card.name}</h3>
          <p>${card.bio}</p>
          <button onclick="toggleTheme(${card.id})">üåó Toggle Theme</button>
          <button onclick="deleteCard(${card.id})">üóëÔ∏è Delete</button>
        `;
        container.appendChild(cardEl);
      });
    };

    const deleteCard = (id) => {
      let cards = JSON.parse(localStorage.getItem('cards')) || [];
      cards = cards.filter(card => card.id !== id);
      localStorage.setItem('cards', JSON.stringify(cards));
      renderCards();
    };

    const toggleTheme = (id) => {
      let cards = JSON.parse(localStorage.getItem('cards')) || [];
      cards = cards.map(card => {
        if (card.id === id) {
          card.theme = card.theme === 'light' ? 'dark' : 'light';
        }
        return card;
      });
      localStorage.setItem('cards', JSON.stringify(cards));
      renderCards();
    };

    window.onload = renderCards;
  </script>
</body>
</html>
